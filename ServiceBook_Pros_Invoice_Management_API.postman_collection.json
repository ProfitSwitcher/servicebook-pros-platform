{
  "info": {
    "name": "ServiceBook Pros - Invoice Management API",
    "description": "Comprehensive API collection for Invoice Management endpoints in the ServiceBook Pros platform. This collection includes all CRUD operations, filtering, pagination, PDF generation, email delivery, and business logic testing.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'https://api.servicebookpros.com/api');",
          "}",
          "",
          "// Set current timestamp for date fields",
          "pm.environment.set('current_date', new Date().toISOString().split('T')[0]);",
          "",
          "// Set future date for due dates (30 days from now)",
          "const futureDate = new Date();",
          "futureDate.setDate(futureDate.getDate() + 30);",
          "pm.environment.set('future_date', futureDate.toISOString().split('T')[0]);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.servicebookpros.com/api",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "your-jwt-token-here",
      "type": "string"
    },
    {
      "key": "invoice_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "customer_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "work_order_id",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Invoice Management",
      "description": "Core invoice CRUD operations",
      "item": [
        {
          "name": "Get All Invoices",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has data with invoices array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('invoices');",
                  "    pm.expect(jsonData.data.invoices).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('total');",
                  "});",
                  "",
                  "pm.test('Response has summary info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('summary');",
                  "    pm.expect(jsonData.data.summary).to.have.property('totalAmount');",
                  "    pm.expect(jsonData.data.summary).to.have.property('invoiceCount');",
                  "});",
                  "",
                  "// Store first invoice ID for other tests",
                  "if (pm.response.json().data.invoices.length > 0) {",
                  "    pm.environment.set('invoice_id', pm.response.json().data.invoices[0].id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices?page=1&limit=10&sort_by=date_issued&sort_order=desc",
              "host": ["{{base_url}}"],
              "path": ["invoices"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "status",
                  "value": "sent",
                  "description": "Filter by status",
                  "disabled": true
                },
                {
                  "key": "customer_id",
                  "value": "{{customer_id}}",
                  "description": "Filter by customer",
                  "disabled": true
                },
                {
                  "key": "date_from",
                  "value": "2025-01-01",
                  "description": "Start date filter",
                  "disabled": true
                },
                {
                  "key": "date_to",
                  "value": "2025-12-31",
                  "description": "End date filter",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "INV-2025",
                  "description": "Search term",
                  "disabled": true
                },
                {
                  "key": "sort_by",
                  "value": "date_issued",
                  "description": "Sort field"
                },
                {
                  "key": "sort_order",
                  "value": "desc",
                  "description": "Sort direction"
                }
              ]
            },
            "description": "Retrieve a paginated list of invoices with optional filtering and sorting. This endpoint supports advanced filtering by status, customer, date ranges, and search terms."
          }
        },
        {
          "name": "Get Invoice by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has invoice details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('invoice');",
                  "    pm.expect(jsonData.data.invoice).to.have.property('id');",
                  "    pm.expect(jsonData.data.invoice).to.have.property('invoice_number');",
                  "});",
                  "",
                  "pm.test('Invoice has line items', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.invoice).to.have.property('line_items');",
                  "    pm.expect(jsonData.data.invoice.line_items).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has calculations', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('calculations');",
                  "    pm.expect(jsonData.data.calculations).to.have.property('subtotal');",
                  "    pm.expect(jsonData.data.calculations).to.have.property('total_amount');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}"]
            },
            "description": "Retrieve detailed information for a specific invoice including line items, payments, activity log, and calculations."
          }
        },
        {
          "name": "Create Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Invoice created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('invoice');",
                  "    pm.expect(jsonData.data).to.have.property('invoice_number');",
                  "});",
                  "",
                  "pm.test('Invoice has correct status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.invoice.status).to.equal('draft');",
                  "});",
                  "",
                  "pm.test('Invoice has correct calculations', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const invoice = jsonData.data.invoice;",
                  "    pm.expect(invoice.subtotal).to.be.a('number');",
                  "    pm.expect(invoice.tax_amount).to.be.a('number');",
                  "    pm.expect(invoice.total_amount).to.be.a('number');",
                  "    pm.expect(invoice.total_amount).to.equal(invoice.subtotal + invoice.tax_amount);",
                  "});",
                  "",
                  "// Store created invoice ID for other tests",
                  "pm.environment.set('created_invoice_id', pm.response.json().data.invoice.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customer_id\": {{customer_id}},\n  \"work_order_id\": {{work_order_id}},\n  \"due_date\": \"{{future_date}}\",\n  \"payment_terms\": \"Net 30\",\n  \"notes\": \"Electrical panel upgrade work - Created via Postman\",\n  \"tax_rate\": 0.08,\n  \"line_items\": [\n    {\n      \"service_id\": 15,\n      \"description\": \"Electrical Panel Upgrade - 200A\",\n      \"quantity\": 1,\n      \"unit_price\": 1200.00,\n      \"item_type\": \"service\"\n    },\n    {\n      \"material_id\": 8,\n      \"description\": \"200A Electrical Panel\",\n      \"quantity\": 1,\n      \"unit_price\": 300.00,\n      \"item_type\": \"material\"\n    },\n    {\n      \"description\": \"Installation Labor\",\n      \"quantity\": 4,\n      \"unit_price\": 85.00,\n      \"item_type\": \"labor\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices",
              "host": ["{{base_url}}"],
              "path": ["invoices"]
            },
            "description": "Create a new invoice with line items. The invoice will be created in draft status and can be modified before sending."
          }
        },
        {
          "name": "Update Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Invoice updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('invoice');",
                  "});",
                  "",
                  "pm.test('Invoice has updated fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const invoice = jsonData.data.invoice;",
                  "    pm.expect(invoice.payment_terms).to.equal('Net 15');",
                  "    pm.expect(invoice.notes).to.include('Updated via Postman');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"due_date\": \"{{future_date}}\",\n  \"payment_terms\": \"Net 15\",\n  \"notes\": \"Updated payment terms for faster processing - Updated via Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{created_invoice_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{created_invoice_id}}"]
            },
            "description": "Update an existing invoice. Only certain fields can be updated depending on the invoice status."
          }
        },
        {
          "name": "Delete Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Invoice deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{created_invoice_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{created_invoice_id}}"]
            },
            "description": "Delete an invoice. Only draft invoices without payments can be deleted."
          }
        }
      ]
    },
    {
      "name": "Invoice Actions",
      "description": "Invoice-specific actions like sending, PDF generation, and duplication",
      "item": [
        {
          "name": "Send Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Invoice sent successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('email_sent_to');",
                  "    pm.expect(jsonData.data).to.have.property('pdf_generated');",
                  "    pm.expect(jsonData.data).to.have.property('invoice_status');",
                  "});",
                  "",
                  "pm.test('Email sent to correct recipients', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.email_sent_to).to.be.an('array');",
                  "    pm.expect(jsonData.data.email_sent_to.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('PDF generated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pdf_generated).to.be.true;",
                  "});",
                  "",
                  "pm.test('Invoice status updated to sent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.invoice_status).to.equal('sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email_addresses\": [\"customer@example.com\", \"accounting@example.com\"],\n  \"subject\": \"Invoice from ServiceBook Pros - Test Invoice\",\n  \"message\": \"Please find attached your invoice for the electrical work completed. Thank you for your business!\",\n  \"include_pdf\": true,\n  \"send_copy_to_self\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/send",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "send"]
            },
            "description": "Send an invoice via email with PDF attachment. This will update the invoice status to 'sent'."
          }
        },
        {
          "name": "Generate Invoice PDF",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});",
                  "",
                  "pm.test('PDF has correct filename', function () {",
                  "    const contentDisposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(contentDisposition).to.include('attachment');",
                  "    pm.expect(contentDisposition).to.include('filename');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/pdf"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/pdf?download=true",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "pdf"],
              "query": [
                {
                  "key": "template_id",
                  "value": "1",
                  "description": "Custom template ID",
                  "disabled": true
                },
                {
                  "key": "download",
                  "value": "true",
                  "description": "Force download"
                }
              ]
            },
            "description": "Generate and download invoice PDF with professional formatting and company branding."
          }
        },
        {
          "name": "Duplicate Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Invoice duplicated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('invoice');",
                  "    pm.expect(jsonData.data).to.have.property('original_invoice_number');",
                  "});",
                  "",
                  "pm.test('Duplicated invoice is draft', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.invoice.status).to.equal('draft');",
                  "});",
                  "",
                  "pm.test('Duplicated invoice has different ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const originalId = pm.environment.get('invoice_id');",
                  "    pm.expect(jsonData.data.invoice.id.toString()).to.not.equal(originalId);",
                  "});",
                  "",
                  "// Store duplicated invoice ID",
                  "pm.environment.set('duplicated_invoice_id', pm.response.json().data.invoice.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"due_date\": \"{{future_date}}\",\n  \"notes\": \"Duplicate invoice for additional work - Created via Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/duplicate",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "duplicate"]
            },
            "description": "Create a copy of an existing invoice as a draft. Useful for recurring work or similar projects."
          }
        }
      ]
    },
    {
      "name": "Line Items Management",
      "description": "Manage invoice line items",
      "item": [
        {
          "name": "Add Line Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Line item added successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('line_item');",
                  "    pm.expect(jsonData.data).to.have.property('updated_totals');",
                  "});",
                  "",
                  "pm.test('Line item has correct data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const lineItem = jsonData.data.line_item;",
                  "    pm.expect(lineItem.description).to.equal('Additional Service - Added via Postman');",
                  "    pm.expect(lineItem.quantity).to.equal(1);",
                  "    pm.expect(lineItem.unit_price).to.equal(150.00);",
                  "});",
                  "",
                  "pm.test('Totals updated correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const totals = jsonData.data.updated_totals;",
                  "    pm.expect(totals).to.have.property('subtotal');",
                  "    pm.expect(totals).to.have.property('tax_amount');",
                  "    pm.expect(totals).to.have.property('total_amount');",
                  "});",
                  "",
                  "// Store line item ID for other tests",
                  "pm.environment.set('line_item_id', pm.response.json().data.line_item.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Additional Service - Added via Postman\",\n  \"quantity\": 1,\n  \"unit_price\": 150.00,\n  \"item_type\": \"service\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/line-items",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "line-items"]
            },
            "description": "Add a new line item to an existing invoice. Totals will be automatically recalculated."
          }
        },
        {
          "name": "Update Line Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Line item updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('line_item');",
                  "    pm.expect(jsonData.data).to.have.property('updated_totals');",
                  "});",
                  "",
                  "pm.test('Line item has updated values', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const lineItem = jsonData.data.line_item;",
                  "    pm.expect(lineItem.quantity).to.equal(2);",
                  "    pm.expect(lineItem.unit_price).to.equal(175.00);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Additional Service - Updated via Postman\",\n  \"quantity\": 2,\n  \"unit_price\": 175.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/line-items/{{line_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "line-items", "{{line_item_id}}"]
            },
            "description": "Update an existing line item. Totals will be automatically recalculated."
          }
        },
        {
          "name": "Delete Line Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Line item deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('updated_totals');",
                  "});",
                  "",
                  "pm.test('Totals updated after deletion', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const totals = jsonData.data.updated_totals;",
                  "    pm.expect(totals).to.have.property('subtotal');",
                  "    pm.expect(totals).to.have.property('tax_amount');",
                  "    pm.expect(totals).to.have.property('total_amount');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/line-items/{{line_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "line-items", "{{line_item_id}}"]
            },
            "description": "Remove a line item from an invoice. Totals will be automatically recalculated."
          }
        }
      ]
    },
    {
      "name": "Payment Management",
      "description": "Record and manage invoice payments",
      "item": [
        {
          "name": "Record Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Payment recorded successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('payment');",
                  "    pm.expect(jsonData.data).to.have.property('invoice_status');",
                  "    pm.expect(jsonData.data).to.have.property('remaining_balance');",
                  "});",
                  "",
                  "pm.test('Payment has correct amount', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.payment.amount).to.equal(500.00);",
                  "    pm.expect(jsonData.data.payment.payment_method).to.equal('check');",
                  "});",
                  "",
                  "pm.test('Remaining balance calculated correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.remaining_balance).to.be.a('number');",
                  "    pm.expect(jsonData.data.payment_percentage).to.be.a('number');",
                  "});",
                  "",
                  "// Store payment ID for other tests",
                  "pm.environment.set('payment_id', pm.response.json().data.payment.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 500.00,\n  \"payment_date\": \"{{current_date}}\",\n  \"payment_method\": \"check\",\n  \"reference_number\": \"CHK-12345\",\n  \"notes\": \"Partial payment received - Recorded via Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/payments",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "payments"]
            },
            "description": "Record a payment against an invoice. This will update the invoice status and remaining balance."
          }
        },
        {
          "name": "Get Payment History",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Payment history retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('payments');",
                  "    pm.expect(jsonData.data).to.have.property('summary');",
                  "});",
                  "",
                  "pm.test('Payments array is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.payments).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Summary has correct fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const summary = jsonData.data.summary;",
                  "    pm.expect(summary).to.have.property('total_paid');",
                  "    pm.expect(summary).to.have.property('remaining_balance');",
                  "    pm.expect(summary).to.have.property('payment_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/payments",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "payments"]
            },
            "description": "Get all payments for a specific invoice with summary information."
          }
        },
        {
          "name": "Update Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Payment updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('payment');",
                  "});",
                  "",
                  "pm.test('Payment has updated values', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const payment = jsonData.data.payment;",
                  "    pm.expect(payment.amount).to.equal(600.00);",
                  "    pm.expect(payment.notes).to.include('Updated via Postman');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 600.00,\n  \"reference_number\": \"CHK-12345-UPDATED\",\n  \"notes\": \"Partial payment received - Updated amount - Updated via Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/payments/{{payment_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "payments", "{{payment_id}}"]
            },
            "description": "Update an existing payment record. This will recalculate the invoice balance."
          }
        },
        {
          "name": "Delete Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Payment deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('updated_balance');",
                  "    pm.expect(jsonData.data).to.have.property('invoice_status');",
                  "});",
                  "",
                  "pm.test('Balance updated after deletion', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.updated_balance).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/{{invoice_id}}/payments/{{payment_id}}",
              "host": ["{{base_url}}"],
              "path": ["invoices", "{{invoice_id}}", "payments", "{{payment_id}}"]
            },
            "description": "Delete a payment record. This will recalculate the invoice balance and status."
          }
        }
      ]
    },
    {
      "name": "Integration Endpoints",
      "description": "Integration with other system components",
      "item": [
        {
          "name": "Convert Work Order to Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Work order converted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('invoice');",
                  "    pm.expect(jsonData.data).to.have.property('line_items_created');",
                  "    pm.expect(jsonData.data).to.have.property('work_order_number');",
                  "});",
                  "",
                  "pm.test('Invoice has work order reference', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.invoice.work_order_id).to.equal(parseInt(pm.environment.get('work_order_id')));",
                  "});",
                  "",
                  "pm.test('Line items created from work order', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.line_items_created).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Store converted invoice ID",
                  "pm.environment.set('converted_invoice_id', pm.response.json().data.invoice.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"due_date\": \"{{future_date}}\",\n  \"payment_terms\": \"Net 30\",\n  \"include_materials\": true,\n  \"include_labor\": true,\n  \"additional_notes\": \"Invoice created from work order - Converted via Postman\",\n  \"tax_rate\": 0.08,\n  \"markup_percentage\": 15\n}"
            },
            "url": {
              "raw": "{{base_url}}/work-orders/{{work_order_id}}/convert-to-invoice",
              "host": ["{{base_url}}"],
              "path": ["work-orders", "{{work_order_id}}", "convert-to-invoice"]
            },
            "description": "Convert a completed work order into an invoice with automatic line item extraction."
          }
        },
        {
          "name": "Get Customer Invoices",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer invoices retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('invoices');",
                  "    pm.expect(jsonData.data).to.have.property('summary');",
                  "});",
                  "",
                  "pm.test('All invoices belong to customer', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const customerId = parseInt(pm.environment.get('customer_id'));",
                  "    jsonData.data.invoices.forEach(invoice => {",
                  "        pm.expect(invoice.customer_id).to.equal(customerId);",
                  "    });",
                  "});",
                  "",
                  "pm.test('Summary has customer analytics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const summary = jsonData.data.summary;",
                  "    pm.expect(summary).to.have.property('total_invoiced');",
                  "    pm.expect(summary).to.have.property('total_paid');",
                  "    pm.expect(summary).to.have.property('outstanding_balance');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/customers/{{customer_id}}/invoices?include_payments=true",
              "host": ["{{base_url}}"],
              "path": ["customers", "{{customer_id}}", "invoices"],
              "query": [
                {
                  "key": "status",
                  "value": "sent",
                  "description": "Filter by status",
                  "disabled": true
                },
                {
                  "key": "date_from",
                  "value": "2025-01-01",
                  "description": "Start date filter",
                  "disabled": true
                },
                {
                  "key": "date_to",
                  "value": "2025-12-31",
                  "description": "End date filter",
                  "disabled": true
                },
                {
                  "key": "include_payments",
                  "value": "true",
                  "description": "Include payment information"
                }
              ]
            },
            "description": "Get all invoices for a specific customer with summary analytics."
          }
        },
        {
          "name": "Get Service Pricing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service pricing retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('service');",
                  "    pm.expect(jsonData.data).to.have.property('pricing');",
                  "});",
                  "",
                  "pm.test('Pricing has all required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const pricing = jsonData.data.pricing;",
                  "    pm.expect(pricing).to.have.property('base_price');",
                  "    pm.expect(pricing).to.have.property('company_markup_percentage');",
                  "    pm.expect(pricing).to.have.property('final_price');",
                  "});",
                  "",
                  "pm.test('Final price calculated correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const pricing = jsonData.data.pricing;",
                  "    const expectedPrice = pricing.base_price * (1 + pricing.company_markup_percentage / 100);",
                  "    pm.expect(pricing.final_price).to.be.closeTo(expectedPrice, 0.01);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/services/15/pricing",
              "host": ["{{base_url}}"],
              "path": ["services", "15", "pricing"]
            },
            "description": "Get current pricing for a service including company-specific markups."
          }
        },
        {
          "name": "Get Material Pricing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Material pricing retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('material');",
                  "    pm.expect(jsonData.data).to.have.property('pricing');",
                  "});",
                  "",
                  "pm.test('Pricing has all required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const pricing = jsonData.data.pricing;",
                  "    pm.expect(pricing).to.have.property('base_cost');",
                  "    pm.expect(pricing).to.have.property('company_markup_percentage');",
                  "    pm.expect(pricing).to.have.property('final_price');",
                  "    pm.expect(pricing).to.have.property('availability');",
                  "});",
                  "",
                  "pm.test('Material is available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pricing.availability).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/materials/8/pricing",
              "host": ["{{base_url}}"],
              "path": ["materials", "8", "pricing"]
            },
            "description": "Get current pricing for a material including company-specific markups."
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "description": "Test error handling and validation",
      "item": [
        {
          "name": "Get Non-existent Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Error code is NOT_FOUND', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.equal('NOT_FOUND');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices/99999",
              "host": ["{{base_url}}"],
              "path": ["invoices", "99999"]
            },
            "description": "Test error handling for non-existent invoice."
          }
        },
        {
          "name": "Create Invoice with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.test('Error details provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('details');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customer_id\": \"invalid\",\n  \"due_date\": \"invalid-date\",\n  \"tax_rate\": 1.5,\n  \"line_items\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/invoices",
              "host": ["{{base_url}}"],
              "path": ["invoices"]
            },
            "description": "Test validation error handling with invalid invoice data."
          }
        },
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/invoices",
              "host": ["{{base_url}}"],
              "path": ["invoices"]
            },
            "description": "Test authentication error handling without authorization token."
          }
        }
      ]
    }
  ]
}

